const task = (async ($) => {
  let products = [];
  let cart = [];

  // Sayfa yapƒ±sƒ±nƒ± olu≈ütur
  const buildHTML = () => {
    $("body").html(`
      <style>
        :root {
          --mainBodyColor1: #a6c1ee;
          --mainBodyColor2: #fbc2eb;
          --card-bg: #fff;
          --button-bg: #007bff;
          --button-color: #fff;
          --card-hover-shadow: 0 4px 12px rgba(0, 0, 255, 0.9);
          --popup-message-bg: #FF0000;
        }
        body {
          background: linear-gradient(135deg, var(--mainBodyColor1), var(--mainBodyColor2));
          font-family: Arial, sans-serif;
          padding: 20px;
          color:#722F37;
        }
        h1 {
          text-align: center;
          margin-bottom: 20px;
        }
        #searchBar {
          text-align: center;
          margin-bottom: 20px;
          display: flex;
          justify-content: space-around;
          align-items: center;
          gap: 20px;
        }
        .input-group {
          display: flex;
          align-items: center;
          gap: 10px;
        }
        #searchInput {
          padding: 8px;
          width: 250px;
          font-size: 16px;
          border: 1px solid #ccc;
          border-radius: 5px;
        }
        .icon {
          font-size: 20px;
        }
        #viewCartBtn {
          font-size: 16px;
          cursor: pointer;
          background: var(--button-bg);
          color: var(--button-color);
          border: none;
          border-radius: 5px;
          display: flex;
          align-items: center;
          gap: 8px;
        }
        #productList {
          display: flex;
          flex-wrap: wrap;
          gap: 20px;
          justify-content: center;
        }
        .product-card {
          background: var(--card-bg);
          border: 1px solid #ccc;
          border-radius: 8px;
          width: 200px;
          padding: 10px;
          text-align: center;
          box-shadow: 0 2px 6px rgba(0,0,0,0.1);
          transition: box-shadow 0.3s;
        }
        .product-card:hover {
          box-shadow: var(--card-hover-shadow);
          transform: scale(1.05);
        }
        .product-card img {
          width: 100%;
          height: 180px;
          object-fit: contain;
        }
        button {
          background: var(--button-bg);
          color: var(--button-color);
          border: none;
          padding: 8px 12px;
          border-radius: 5px;
          cursor: pointer;
          margin-top: 8px;
          margin-right: 5px;
        }
        button:hover {
          background: darkblue;
          transform: scale(1.05);
        }
        #cartModal {
          display: none;
          position: fixed;
          top: 100px;
          right: 50px;
          background: white;
          padding: 20px;
          border-radius: 10px;
          box-shadow: 0 0 20px rgba(0,0,0,0.2);
          width: 300px;
          max-height: 400px;
          overflow-y: auto;
          z-index: 9999;
        }
        .cart-item-modal {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 10px;
          border-bottom: 1px solid #ddd;
          padding-bottom: 5px;
        }
        .cart-item-modal img {
          width: 40px;
          height: 40px;
          object-fit: contain;
        }
        .remove-item {
          background: red;
          color: white;
          border: none;
          border-radius: 5px;
          padding: 5px;
          cursor: pointer;
        }
        #totalPrice {
          margin-top: 10px;
          font-weight: bold;
          text-align: right;
        }
        #cartOverlay {
          display: none;
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0,0,0,0.1);
          z-index: 9998;
        }
        .popup-message {
          position: fixed;
          top: 20px;
          right: 20px;
          background: var(--popup-message-bg);
          color: #fff;
          padding: 10px 20px;
          border-radius: 5px;
          z-index: 99999;
          opacity: 0;
        }
        .spinner {
          width: 40px;
          height: 40px;
          margin: 20px auto;
          border: 5px solid #f3f3f3;
          border-top: 5px solid #3498db;
          border-radius: 50%;
          animation: rotate 1s linear infinite;
        }
        @keyframes rotate {
          0% { transform: rotate(0); }
          100% { transform: rotate(360deg); }
        }
        #detailModal {
          display: none;
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background: #fff;
          padding: 20px;
          border-radius: 10px;
          box-shadow: 0 0 20px rgba(0,0,0,0.3);
          z-index: 10000;
          width: 300px;
        }
        #detailOverlay {
          display: none;
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0,0,0,0.5);
          z-index: 9999;
        }
      </style>
      <h1>üõí Mini E-Commercial</h1>
      <div id="searchBar">
        <div class="input-group">
          <span class="icon">üîç</span>
          <input type="text" id="searchInput" placeholder="Search a product..." />
        </div>
        <button id="viewCartBtn"><span class="icon">üß∫</span>Products added to Cart</button>
      </div>
      <div id="productList"></div>
      <div id="cartOverlay"></div>
      <div id="cartModal"></div>
      <div id="detailOverlay"></div>
      <div id="detailModal"></div>
    `);
  };

  // √úr√ºnleri filtreleyip sayfada g√∂r√ºnt√ºleyen fonksiyon
  const renderProducts = (filter = "") => {
    // √ñnceki √ºr√ºn kartlarƒ±nƒ± temizle
    $("#productList").empty();

    // √úr√ºnleri filtrele: ba≈ülƒ±k, filtre metnini i√ßeriyorsa e≈üle≈üir
    const filtered = products.filter((product) =>
      product.title.toLowerCase().includes(filter)
    );

    // Filtreleme sonucu √ºr√ºn bulunamazsa kullanƒ±cƒ±ya mesaj g√∂ster
    if (filtered.length === 0) {
      $("#productList").append("<p>Product not found.</p>");
      return; // Fonksiyondan √ßƒ±k
    }

    // Filtrelenen her √ºr√ºn i√ßin kart olu≈ütur
    filtered.forEach((product) => {
      const card = $(`
      <div class="product-card" data-id="${
        product.id
      }" data-title="${product.title.toLowerCase()}">
        <img src="${product.image}" alt="${product.title}">
        <h4>${product.title.slice(
          0,
          35
        )}...</h4> <!-- Uzun ba≈ülƒ±klar kƒ±saltƒ±lƒ±yor -->
        <p><b>$${product.price}</b></p>
        <button class="addToCart">Add to Cart</button> <!-- Sepete ekle butonu -->
        <button class="viewDetail">Detail</button>     <!-- √úr√ºn detayƒ±nƒ± g√∂steren buton -->
      </div>
    `);

      // Olu≈üturulan kartƒ± √ºr√ºn listesine ekle
      $("#productList").append(card);
    });
  };

  const renderCartModal = () => {
    // Sepet modali i√ßin jQuery se√ßiciyle modal elementini alƒ±yoruz
    const modal = $("#cartModal");
    // Modal i√ßeriƒüini temizliyoruz ki eski √ºr√ºnler kalmasƒ±n
    modal.empty();

    // LocalStorage'dan kaydedilmi≈ü sepet verisini alƒ±yoruz
    // Eƒüer yoksa bo≈ü dizi olarak ba≈ülatƒ±yoruz
    const saved = JSON.parse(localStorage.getItem("cart")) || [];

    // Sepetin toplam fiyatƒ±nƒ± tutacak deƒüi≈üken
    let total = 0;

    // Eƒüer sepet bo≈üsa kullanƒ±cƒ±ya √ºr√ºn bulunamadƒ±ƒüƒ±nƒ± g√∂steriyoruz
    if (saved.length === 0) {
      modal.append("<p>Product not found.</p>");
    } else {
      // Sepetteki her √ºr√ºn i√ßin i≈ülemler
      saved.forEach(({ id, quantity }) => {
        // √úr√ºn√º √ºr√ºnler listesinden ID ile buluyoruz
        const product = products.find((p) => p.id === id);

        // √úr√ºn bulunursa devam ediyoruz
        if (product) {
          // √úr√ºn fiyatƒ± ile adet √ßarpƒ±larak ara toplam bulunur
          const subtotal = product.price * quantity;
          // Ara toplam toplam fiyata eklenir
          total += subtotal;

          // Modal i√ßine sepetteki √ºr√ºn√º g√∂steren HTML eklenir
          modal.append(`
          <div class="cart-item-modal" data-id="${product.id}">
            <img src="${product.image}">  <!-- √úr√ºn resmi -->
            <span>${quantity}x ${product.title.slice(
            0,
            15
          )}...</span>  <!-- √úr√ºn adƒ± ve adet -->
            <span>$${subtotal.toFixed(
              2
            )}</span>  <!-- √úr√ºn ara toplam fiyatƒ± -->
            <button class="remove-item">Delete</button>  <!-- √úr√ºn√º sepetten √ßƒ±karma butonu -->
          </div>
        `);
        }
      });

      // T√ºm √ºr√ºnlerin toplam fiyatƒ±nƒ± g√∂steriyoruz
      modal.append(`<div id="totalPrice">Toplam: $${total.toFixed(2)}</div>`);

      // Sepeti tamamen temizlemek i√ßin bir buton ekliyoruz
      modal.append(`<button id="clearCartBtn">Clear Cart</button>`);
    }
  };

  const setEvents = () => {
    // Arama inputuna her yazƒ± giri≈üinde √ºr√ºnleri filtrele ve g√∂ster
    $("#searchInput").on("input", function () {
      const query = $(this).val().toLowerCase();
      renderProducts(query);
    });

    // √úr√ºn listesinde "Add to Cart" butonuna tƒ±klanƒ±nca sepet i≈ülemi
    $("#productList").on("click", ".addToCart", function () {
      // Tƒ±klanan √ºr√ºn√ºn ID'sini al
      const id = $(this).closest(".product-card").data("id");

      // Sepette bu √ºr√ºn varsa miktarƒ±nƒ± artƒ±r
      const existing = cart.find((item) => item.id === id);
      if (existing) {
        existing.quantity++;
      } else {
        // Yoksa sepete yeni √ºr√ºn olarak ekle
        cart.push({ id: id, quantity: 1 });
      }

      // G√ºncel sepeti localStorage'a kaydet
      localStorage.setItem("cart", JSON.stringify(cart));

      // Sepete eklendi bilgisini g√∂steren popup olu≈ütur ve g√∂ster
      const popup = $(
        '<div class="popup-message">Product added to cart</div>'
      ).appendTo("body");
      popup.animate({ opacity: 1 }, 300);
      setTimeout(() => {
        popup.fadeOut(300, () => popup.remove());
      }, 1500);
    });

    // √úr√ºn listesinde "Detail" butonuna tƒ±klanƒ±nca detay modalƒ±nƒ± a√ß
    $("#productList").on("click", ".viewDetail", function () {
      // Tƒ±klanan √ºr√ºn√ºn ID'sini al
      const id = $(this).closest(".product-card").data("id");

      // ID ile √ºr√ºn bilgisini bul
      const product = products.find((p) => p.id === id);

      if (product) {
        // Detay modalƒ±na √ºr√ºn bilgilerini yaz
        $("#detailModal").html(`
        <h3>${product.title}</h3>
        <img src="${product.image}" style="width:100%; max-height:150px; object-fit:contain">
        <p>${product.description}</p>
        <p><b>Price: $${product.price}</b></p>
        <button id="closeDetail">Close</button>
      `);

        // Detay modalƒ±nƒ± ve overlayi g√∂ster (g√∂r√ºn√ºr yap)
        $("#detailOverlay").fadeIn();
        $("#detailModal").fadeIn();
      }
    });

    // Detay modalƒ±ndaki "Close" butonuna tƒ±klanƒ±nca modalƒ± kapat
    $("body").on("click", "#closeDetail", function () {
      $("#detailOverlay").fadeOut();
      $("#detailModal").fadeOut();
    });

    // Sepet g√∂r√ºnt√ºle butonuna tƒ±klanƒ±nca sepet modalƒ±nƒ± a√ß
    $("#viewCartBtn").on("click", function () {
      renderCartModal();
      $("#cartOverlay").fadeIn();
      $("#cartModal").fadeIn();
    });

    // Sepet overlayine tƒ±klanƒ±nca modalƒ± kapat
    $("#cartOverlay").on("click", function () {
      $("#cartModal").fadeOut();
      $("#cartOverlay").fadeOut();
    });

    // Sepet modalƒ±ndaki "Delete" butonuna tƒ±klanƒ±nca ilgili √ºr√ºn√º azalt veya √ßƒ±kar
    $("#cartModal").on("click", ".remove-item", function (e) {
      e.stopPropagation(); // Tƒ±klamanƒ±n modal dƒ±≈üƒ±na yayƒ±lmasƒ±nƒ± engelle

      // Tƒ±klanan √ºr√ºn√ºn ID'sini al
      const id = $(this).closest(".cart-item-modal").data("id");

      // Sepetteki √ºr√ºn√ºn indexini bul
      const index = cart.findIndex((item) => item.id === id);

      if (index > -1) {
        // √úr√ºn miktarƒ±nƒ± 1 azalt
        cart[index].quantity--;

        // Miktar 0 veya daha azsa √ºr√ºn√º tamamen √ßƒ±kar
        if (cart[index].quantity <= 0) {
          cart.splice(index, 1);
        }

        // G√ºncel sepeti localStorage'a kaydet
        localStorage.setItem("cart", JSON.stringify(cart));
      }

      // Sepet modalƒ±nƒ± g√ºncelle
      renderCartModal();
    });

    // Sepet temizle butonuna tƒ±klanƒ±nca sepeti tamamen bo≈üalt
    $("#cartModal").on("click", "#clearCartBtn", function () {
      cart = [];
      localStorage.removeItem("cart");
      renderCartModal();
    });
  };
  const init = async () => {
    // Sayfa yapƒ±sƒ±nƒ± olu≈ütur (HTML + CSS)
    buildHTML();

    // √úr√ºn listesinin i√ßine y√ºkleniyor g√∂stergesi (spinner) ekle
    $("#productList").append('<div class="spinner"></div>');

    // FakeStore API'den √ºr√ºn verilerini JSON olarak √ßek (async await ile)
    const data = await $.getJSON("https://fakestoreapi.com/products");

    // Y√ºklenme tamamlandƒ±, spinner'ƒ± gizle
    $(".spinner").hide();

    // √áekilen √ºr√ºnleri products dizisine ekle
    products.push(...data);

    // Daha √∂nce localStorage'da kaydedilmi≈ü sepeti getir veya bo≈ü dizi ata
    cart = JSON.parse(localStorage.getItem("cart")) || [];

    // √úr√ºnleri sayfada g√∂ster (render et)
    renderProducts();

    // T√ºm buton, input gibi elementlere event (olay) dinleyicileri ekle
    setEvents();
  };

  // Sayfa y√ºklendiƒüinde init fonksiyonunu √ßalƒ±≈ütƒ±r
  await init();
})(jQuery);
